#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_ROWS 10
#define MAX_COLS 10
#define MAX 128
#define MAX2 300
#define MAX3 30
#define BUFFER_SIZE 128

#define FOOD 1
#define TOILETRIES 2
#define ITEM_COUNT 19

typedef struct data{
   char name[MAX];
  int roomnum;
  int floornum;
  int accnum;
  int numpeople;
  int  dateInD;
  int  dateInM;
  int  dateInY;
  int numDays;
  int roomService;
} data ; 

static struct data emptyData;

typedef struct RoomServiceItem {
	int type;
	int id;
	char name[BUFFER_SIZE];
	int price;
} RoomServiceItem;

struct RoomServiceItem items[ITEM_COUNT] = { {FOOD, 1, "soup", 120},
									 {FOOD, 2, "salad", 250},
									 {FOOD, 3, "fish", 600},
									 {FOOD, 4, "lamb", 550},
									 {FOOD, 5, "ribeye", 400},
									 {FOOD, 6, "pannacotta", 120},
									 {FOOD, 7, "brownie", 90},
									 {FOOD, 8, "fondue", 300},
									 {FOOD, 9, "shake", 90},
									 {FOOD, 10, "soda", 50},
									 {FOOD, 11, "wine", 1000},
									 {FOOD, 12, "beer", 90},
									 {TOILETRIES, 1, "shampoo", 30},
									 {TOILETRIES, 2, "conditioner", 30},
									 {TOILETRIES, 3, "bodygel", 20},
									 {TOILETRIES, 4, "toothbrush", 15},
									 {TOILETRIES, 5, "toothpaste", 15},
									 {TOILETRIES, 6, "soap", 10},
									 {0, 0, "empty", 0}
								    };

int clearKeyboardBuffer() {
	char ch;
	while ((ch = getchar() != '\n') && (ch != EOF));
}

struct RoomServiceItem getItem(int type, int id) {
	int i = 0;
	for (i=0; i < ITEM_COUNT; i++ ) {
		if (items[i].type == type && items[i].id == id) {
			return items[i];
		}		
	}
	return items[ITEM_COUNT-1];
}

void menuFood()
{puts("====NAME OF RESTO====");
  puts("I.Appetizer");
  puts("  1. Soup of the Day---------------------- P120");
  puts("  2. Caesar Salad------------------------- P250");
  puts("II.Entrees");
  puts("  3. Grilled Salmon Fillet---------------- P600");
  puts("  4. Lamb Shank--------------------------- P550");
  puts("  5. Ribeye------------------------------- P400");
  puts("III.Dessert");
  puts("  6. Panna Cotta-------------------------- P120");
  puts("  7. Brownie Cup-------------------------- P90");
  puts("  8. Chocolate Fondue--------------------- P300");
  puts("IV.Beverages");
  puts("  9. Fruit Shake-------------------------- P90");
  puts("  10. Soda--------------------------------- P50");
  puts("  11. Wine--------------------------------- P1,000");
  puts("  12. Beer--------------------------------- P90");
}

void orderItems(data* room, int type) 
{
  while(1) {
	int c, num;
	RoomServiceItem item;
	char input;
	
	printf("\nEnter you order: ");
	scanf("%d", &c);
	clearKeyboardBuffer();
	
	item = getItem(type, c);
	if (item.price == 0) {
		printf("\nInvalid order.\n");
	}
	else  {
		printf("How many %s do you like? (min. 1): ", item.name);
		scanf("%d", &num);
		clearKeyboardBuffer();
		
		room->roomService = room->roomService + (num * item.price);
		
		
		printf("More? (y/n): ");	
		scanf("%c", &input);
		clearKeyboardBuffer();
		
		if (input == 'n') {
			break;
		} 
	}
  }
}


void menuToiletries()
{
  puts("+++++TOILETRIES++++++++++");
  puts("1. Shampoo---------------------------------- P30");
  puts("2. Conditioner------------------------------ P30");
  puts("3. Body Gel--------------------------------- P20"
       );
  puts("4. Toothbrush------------------------------- P15");
  puts("5. Toothpaste------------------------------- P15");
  puts("6. Soap------------------------------------- P10");
}


void dispMainMenu()
{
 printf("\n============================================");
 printf("\n           ╦ ╦┌─┐┬  ┌─┐┌─┐┌┬┐┌─┐┬");
 printf("\n           ║║║├┤ │  │  │ ││││├┤ │");
 printf("\n           ╚╩╝└─┘┴─┘└─┘└─┘┴ ┴└─┘o");
 printf("\n============================================");
 printf("\nWelcome to hotel manager! ");
 printf("\nAre you the owner or a customer?");
 printf("\n1 Owner");
 printf("\n2 Customer");
 printf("\n3 EXIT");
 printf("\nEnter number: ");
}

void dispOwnerMenu()
{       printf("\n============================================");
	printf("\n                   Owner                    ");
	printf("\n============================================");
	printf("\nAs an owner you have the following options: ");
	printf("\n1 Reset the size of the hotel.");
	printf("\n2 View total number of customers and earnings");
	printf("\n3 Set room prices.");
	printf("\n4 Search customer profiles.");
	printf("\n5 Exit.");
	printf("\nEnter number: ");
}

void dispCustomerMenu()
{       printf("\n============================================");
	printf("\n                 Customer                   ");
	printf("\n============================================");
	printf("\n1 Check In");
	printf("\n2 Room Service");
	printf("\n3 Check Out");
	printf("\n4 Exit");
    printf("\nEnter number: ");
}


void sumOverall(data ROOM[][MAX_COLS], int floortot, int roomtot, int  price)
{ int i,j,sum; int earn; sum=0;earn=0;
  int floorsum[10];
  for( i=0;i<floortot;i++)
    {printf("\nFloor %d\t", i);
      floorsum[i]=0;
      for(j=0;j<roomtot;j++)
	{
	  sum=sum+ROOM[i][j].numpeople;
	  floorsum[i]=floorsum[i]+ROOM[i][j].numpeople;
	  earn=earn+(ROOM[i][j].roomService)+(ROOM[i][j].numpeople)*(ROOM[i][j].numDays)*price;
	  printf("\t%d",ROOM[i][j].numpeople);}
    }
  printf("\n");
  for(i=0;i<floortot;i++)
    {printf("\nFloor %d: %d tenants",i, floorsum[i]);}
  printf("\n\nThere is a total of %d customer/s in the hotel.", sum);
  printf("\nAt room rate of Php %d per day,\n Php %d is your total rent earnings.", price, earn);
}

void getSize(int *prow, int *pcol){
  for(;;){
    printf("\nHow many floors to build? (n <= %d) :  \n", MAX_ROWS);
    printf(">> ");
    scanf(" %d", prow);
    printf("How many rooms per floor? (n <= %d) :  \n", MAX_COLS);
    printf(">> ");
    scanf(" %d", pcol);
    if((*prow <= MAX_ROWS && *prow > 0) && (*pcol <= MAX_COLS && *pcol > 0))
      {printf("\nBuilding hotel with %d floors and %d rooms per floor.", *prow, *pcol);
	break;}
    else
      puts("Invalid Input! Please try again...\n");
  }
}

data* searchPerson(data ROOM[][MAX_COLS], int floortot, int roomtot, char search[28])
{ int i, j, present=0;
			fflush(stdin);
			fgets((search), 128, stdin);
			fgets((search), 128, stdin);
			search[strlen(search)]='\0';
			present=0;
			for(i=0;i<floortot;i++){
			  for(j=0;j<roomtot;j++){
			  if(strcmp(ROOM[i][j].name, search)==0)
			    {
			      printf("\n Name found!");
			      printf("\nName: %s", ROOM[i][j].name);
			      printf("\nFloor Number: %d", ROOM[i][j].floornum);
			      printf("\nRoom Number: %d", ROOM[i][j].roomnum);
			      printf("\nAccount Number: %d", ROOM[i][j].accnum);
			      printf("\nNum. of People in Room: %d", ROOM[i][j].numpeople);
			       printf("\nDate of Arrival: %d/%d/%d",ROOM[i][j].dateInM,ROOM[i][j].dateInD,ROOM[i][j].dateInY);
		     printf("\nNumber of Days stayed: %d", ROOM[i][j].numDays);
			      present++;
				  return &ROOM[i][j];
			    }
			  }
			}
			if (present==0) printf("Name not found\n");
			return &emptyData;
}

void checkOut(data ROOM[][MAX_COLS], int floortot, int roomtot, char search[28])
{ int i, j, present=0;
			fflush(stdin);
			fgets((search), 128, stdin);
			fgets((search), 128, stdin);
			search[strlen(search)]='\0';
			present=0;
			for(i=0;i<floortot;i++){
			  for(j=0;j<roomtot;j++){
			  if(strcmp(ROOM[i][j].name, search)==0)
			    {
				    ROOM[i][j].accnum=0;
				    ROOM[i][j].numpeople=0;	
				    ROOM[i][j].numpeople=0;
				    ROOM[i][j].dateInM=0;
				    ROOM[i][j].dateInD=0;	
				    ROOM[i][j].dateInY=0;
				    strcpy(ROOM[i][j].name,"");
			      present++;
			      printf("\nFloor %d Room %d now has no occupants",i,j);
			    }
			  }
			}
			if (present==0) printf("\nName not found\n");
}

void clearAll(data ROOM[][MAX_COLS],int floortot, int roomtot)
{int i,j;
  
			    for(i=0;i<floortot;i++)
			      {for(j=0;j<roomtot;j++)
				  {
				    ROOM[i][j].accnum=0;
				    ROOM[i][j].numpeople=0;	
				    ROOM[i][j].numpeople=0;
				    ROOM[i][j].dateInM=0;
				    ROOM[i][j].dateInD=0;	
				    ROOM[i][j].dateInY=0;
				    strcpy(ROOM[i][j].name,"");
				  }
			      }
}



int main()
{int a, i, j,dom,month,days,final,choice,days1,month1, c,choice2, choice3, floortot, roomtot, matrix, floorchoice, present, cc,fnum,rnum,year,doy, rebuild;
  char eman[MAX];
 floortot=3;
 roomtot=3;
 int price=1000;
 char search[28];
 data ROOM[10][10];
 clearAll(ROOM, floortot, roomtot);
 while(1){
 dispMainMenu();
 scanf("%d", &choice);
 switch(choice)
 {case 1:
	a=0;
	while(a==0){
	dispOwnerMenu();
	scanf("%d", &choice2);
	switch(choice2)
	{
		case 1:
			printf("\n|==RESETTING THE SIZE OF HOTEL==|");
			printf("\nAre you sure you want too rebuild the hotel? \nPress 1 if yes: ");
			scanf("%d", &rebuild);
			if (rebuild==1)
			  {clearAll(ROOM, floortot, roomtot);
			    getSize(&floortot, &roomtot);
			    clearAll(ROOM, floortot, roomtot);
			  }
			else printf("\nRebuilding is cancelled.\nData is kept.");
			break;
		case 2:
		  printf("\n|==VIEWING TOTAL NUMBER OF CUSTOMERS AND EARNINGS==|");sumOverall(ROOM, floortot, roomtot, price);
			break;
		case 3:
			printf("\n|==SETTING THE PRICES==|");
			printf("\nHow much would be the room rate per day?");
			scanf("%d",&price);			
			printf("\nNew room rate per day is Php %d", price);
			break;
		case 4:
		        printf("\n|==PROFILE FINDER==|");			
			printf("\n Input name to search: ");
			searchPerson(ROOM,floortot,roomtot,search );
			break;
	        case 5:
			a++;
			break;
		default:
			printf("\nINVALID INPUT");
			break;
	}
	}
	break;
  case 2:
	a=0;
	while(a==0){
	dispCustomerMenu();
	scanf("%d", &choice2);
	switch(choice2)
	{
		case 1:
			printf("\n|==CHECK IN==|");
			//Name
		
			printf("\nEnter name: ");		      
			fflush(stdin);
			fgets((eman), 128, stdin);
			fgets((eman), 128, stdin);
			eman[strlen(eman)]='\0';
			//Room and Floor Number
			fnum=-1;rnum=-1;
			while((fnum<0)||(fnum>=floortot))
			  {printf("\nEnter floor number. 0-%d only.: ", floortot-1);
			    scanf("%d", &fnum);}
			while((rnum<0)||(rnum>=floortot))
			  {printf("\nEnter room number. 0-%d only.", roomtot-1);
			    scanf("%d", &rnum);}
	 
			ROOM[fnum][rnum].roomnum=rnum;
			ROOM[fnum][rnum].floornum=fnum;

			
			//Number in the room
			if(ROOM[fnum][rnum].numpeople!=0)printf("There are already occupants in Floor %d, Room %d", fnum, rnum);
			else{
			strcpy(ROOM[fnum][rnum].name,eman);
			while((ROOM[fnum][rnum].numpeople<=0)||(ROOM[fnum][rnum].numpeople>5)){
			printf("Enter number of guests. Max of 5 only.: ");
			scanf("%d",  &ROOM[fnum][rnum].numpeople);}

			printf("Enter account number.: ");
			scanf("%d",  &ROOM[fnum][rnum].accnum);
			
			//date in 
			printf("\nDate Checked In");
			ROOM[fnum][rnum].dateInM=0;
			ROOM[fnum][rnum].dateInD=0;
			ROOM[fnum][rnum].dateInY=0;
			while((ROOM[fnum][rnum].dateInM>12)||(ROOM[fnum][rnum].dateInM<=0)){
			    printf("\nEnter month(1-12)");
			    scanf("%d", &ROOM[fnum][rnum].dateInM);}

			while((ROOM[fnum][rnum].dateInD>31)||(ROOM[fnum][rnum].dateInD<=0)){
			
			    printf("\nEnter date(1-31)");
			    scanf("%d", &ROOM[fnum][rnum].dateInD);}
		        
			     printf("\nEnter year");
			     scanf("%d", &ROOM[fnum][rnum].dateInY);
		      
			printf("\nHow many days do you wish to stay? ");
			scanf("%d",&ROOM[fnum][rnum].numDays);
			printf("=====Customer Profile=====");
			     printf("\nName: %s", ROOM[fnum][rnum].name);
			      printf("\nFloor Number: %d",ROOM[fnum][rnum].floornum);
			     printf("\nRoom Number: %d",ROOM[fnum][rnum].roomnum);
			     printf("\nAccount Number: %d", ROOM[fnum][rnum].accnum);
	       	     printf("\nNumber of Guests: %d",ROOM[fnum][rnum].numpeople);
		     printf("\nDate of Arrival: %d/%d/%d",ROOM[fnum][rnum].dateInM,ROOM[fnum][rnum].dateInD,ROOM[fnum][rnum].dateInY);
		     printf("\nNumber of Days staying: %d",ROOM[fnum][rnum].numDays);
			}
			
			break;
		case 2:
			printf("Enter your name first: " );
			data* room = searchPerson(ROOM,floortot,roomtot,search );
			if (strcmp(room->name, emptyData.name) != 0) {
				printf("\n\n|--ROOM SERVICE--|");
				printf("\n1. Food");
				printf("\n2. Toiletries");
				printf("\n3. Exit");
				printf("\n|----------------|\n");
				printf("Choose a room service item type: ");
				scanf("%d", &c);
				switch(c)
				  {
				  case 1:
					menuFood();
					orderItems(room,FOOD);
					break;
				  case 2:
					menuToiletries();
					orderItems(room,TOILETRIES);
						break;
				  case 3:
					a++;
					break;
				  default: printf("Invalid Input");
					break;
				  }
			}
			
			break;
			
		case 3:
			printf("\n|--CHECK OUT--|");
			printf("\nEnter Name.");
			checkOut(ROOM, floortot, roomtot, search);
			break;
		case 4:	
			a++;
			break;
		default:
			printf("\nINVALID INPUT");
			break;
	}
	
	}
	break;

  case 3:
	return 0;
	break;
  default:
	printf("INVALID INPUT.");
	break;
 }
 
 }
 return 0;
}
